# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'AppId' was defined in the Variables tab
# Variable 'AppSecret' was defined in the Variables tab
# Variable 'AzureBotName' was defined in the Variables tab
# Variable 'AzureSubscription' was defined in the Variables tab
# Variable 'BotGroup' was defined in the Variables tab
# Variable 'BuildConfiguration' was defined in the Variables tab
# Variable 'DeleteResourceGroup' was defined in the Variables tab
# Variable 'MyGetPersonalAccessToken' was defined in the Variables tab
# Variable 'runCodesignValidationInjection' was defined in the Variables tab
# Variable 'SampleBotName' was defined in the Variables tab
# Variable 'SampleFolderName' was defined in the Variables tab
# Variable 'SampleRootPath' was defined in the Variables tab
# Variable Group 'AzureDeploymentCredsVariableGroup' was defined in the Variables tab
# Variable Group 'SamplesE2ETestsVariableGroup' was defined in the Variables tab
# Variable Group 'MyGetPersonalAccessTokenVariableGroup' was defined in the Variables tab

parameters:
  - name: testLatestPackage
    displayName: Test latest daily package version
    type: boolean
    default: true
  - name: versionToTest
    displayName: Version to test (Only if 'Test latest' is unchecked)
    type: string
    default: 'E.g. 4.15.0-daily.20210714.258979.1220aed'

# Run this job every night at 2 AM (PST) on the main branch
schedules:
- cron: 0 9 * * *
  branches:
    include:
    - main
  always: true

# Do not run PR validation
pr: none

# Do not run CI validation
trigger: none

resources:
  repositories:
  - repository: self
    type: git
    ref: main

#variables:
#- group: SamplesE2ETestsVariableGroup
#- group: MyGetPersonalAccessTokenVariableGroup

jobs:
- job: Job_1
  displayName: Agent job 1
  pool:
    vmImage: windows-2019
  steps:
  - checkout: self
    persistCredentials: True
  - task: PowerShell@2
    displayName: Create nuget.config for ConversationalAI/BotFramework feed
    inputs:
      targetType: inline
      script: >-
        $file = "$(SampleRootPath)\nuget.config";

        $content = @"

        <?xml version="1.0" encoding="utf-8"?>

        <configuration>
          <packageSources>
            <add key="ConversationalAI" value="https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/nuget/v3/index.json" />
            <add key="NuGet official package source" value="https://api.nuget.org/v3/index.json" />
          </packageSources>
          <activePackageSource>
            <add key="All" value="(Aggregate source)" />
          </activePackageSource>
        </configuration>

        "@;

        New-Item -Path $file -ItemType "file" -Value $content;
        '-------------'; get-content "$file"; '===================';
  - task: PowerShell@2
    displayName: Create nuget.config for MyGet feed
    enabled: False
    inputs:
      targetType: inline
      script: >-
        $file = "$(System.DefaultWorkingDirectory)/samples/csharp_dotnetcore/$(SampleFolderName)/nuget.config";

        $content = @"

        <?xml version="1.0" encoding="utf-8"?>

        <configuration>
          <packageSources>
            <add key="MyGet" value="https://botbuilder.myget.org/F/botbuilder-v4-dotnet-daily/api/v3/index.json" />
          </packageSources>
          <activePackageSource>
            <add key="All" value="(Aggregate source)" />
          </activePackageSource>
        </configuration>

        "@;

        New-Item -Path $file -ItemType "file" -Value $content;
        '-------------'; get-content "$file"; '===================';
  - powershell: |
     $packageName = "Microsoft.Bot.Builder.Integration.AspNet.Core";
   
     #$url = "https://feeds.dev.azure.com/ConversationalAI/BotFramework/_apis/packaging/Feeds/SDK/Packages/26dde74d-6079-401c-a9e0-c6d839e02c18/versions?api-version=5.1-preview.1"
   
     Write-Host "Get latest $packageName version number from ConversationalAI BotFramework SDK feed";
   
     $RegistryUrlSource = "https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/nuget/v3/index.json" 
     $PackageList = nuget list Microsoft.Bot.Builder.Integration.AspNet.Core -Source "$RegistryUrlSource" -PreRelease
     [string]$latestVersion = $PackageList.Split(" ")[-1]
   
     #$result = Invoke-RestMethod -Uri $url -Method Get -ContentType "application/json";
     #[string]$latestVersion = $result.value[0].protocolMetadata.data.version;
   
     $packageName;
     $latestVersion;
     "##vso[task.setvariable variable=TargetVersion;]$latestVersion";
    displayName: 'Get latest botbuilder package version from Azure feed - https://dev.azure.com/ConversationalAI/BotFramework/_packaging?_a=feed&feed=SDK'
    condition: ${{ parameters.testLatestPackage }}

  - powershell: |
     $targetVersion = "${{ parameters.versionToTest }}";
     $targetVersion;
     "##vso[task.setvariable variable=TargetVersion;]$targetVersion";
    displayName: 'Set botbuilder package version per user input at queue time'
    condition: ne(${{ parameters.testLatestPackage }}, 'true')

  - powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
    displayName: 'Display env vars'
 
  - task: tagBuildOrRelease@0
    displayName: Tag Build with botbuilder version
    inputs:
      tags: Using botbuilder version $(TargetVersion)

  - powershell: |
      $path = "$(SampleRootPath)\\$(SampleBotName).csproj";
      $packages = @('Microsoft.Bot.Builder.Integration.AspNet.Core','Microsoft.Bot.Builder.AI.Luis','Microsoft.Bot.Builder.Dialogs');
      $newVersion = "$(TargetVersion)";

      $content = Get-ChildItem -Path "$path" | Get-Content -Raw

      foreach ($package in $packages) {
          $find = "$package`" Version=`"\S*`"";
          $replace = "$package`" Version=`"$newVersion`"";
          $content = $content -Replace "$find", "$replace";
      }

      Set-Content -Path $path -Value $content;
      '-------------'; get-content $path; '===================';
    displayName: Set PackageReference to target version in $(SampleBotName).csproj

  - task: NuGetToolInstaller@1
    displayName: Use NuGet 5.5.1
    inputs:
      versionSpec: 5.5.1
  - task: NuGetCommand@2
    displayName: NuGet restore $(SampleBotName).csproj
    inputs:
      solution: $(SampleRootPath)\$(SampleBotName).csproj
      selectOrConfig: config
      nugetConfigPath: $(SampleRootPath)\nuget.config
  - task: DotNetCoreCLI@2
    displayName: dotnet publish $(SampleBotName).csproj
    inputs:
      command: publish
      publishWebProjects: false
      projects: $(SampleRootPath)\$(SampleBotName).csproj
      custom: publish
      arguments: --runtime linux-x64 --configuration $(BuildConfiguration) --output $(SampleRootPath)\publishedbot
      zipAfterPublish: false
      modifyOutputPath: false
  - task: AzureCLI@2
    displayName: 'Preexisting RG: create group, create resources, #prepare .deployment file'
    inputs:
      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: >-
        Set-PSDebug -Trace 1;


        az group create --location westus --name $(BotGroup)


        # set up bot channels registration, app service, app service plan

        az deployment group create --resource-group "$(BotGroup)" --template-file "$(SampleRootPath)\DeploymentTemplates\LinuxDotNet\template.json" --parameters appId="$(AppId)" appSecret="$(AppSecret)" botName="$(BotName)" --name "$(BotName)";


        #az bot prepare-deploy --lang Csharp --code-dir "$(SampleRootPath)" --proj-file-path "CoreBot.csproj";


        Set-PSDebug -Trace 0;
  - task: AzureCLI@2
    displayName: Create DirectLine channel
    inputs:
      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
      scriptType: batch
      scriptLocation: inlineScript
      inlineScript: call az bot directline create -n "$(BotName)" -g "$(BotGroup)" > "$(System.DefaultWorkingDirectory)\DirectLineCreate.json"
  - task: PowerShell@2
    displayName: Set up bot directline keys
    inputs:
      targetType: inline
      script: >-
        $json = Get-Content '$(System.DefaultWorkingDirectory)\DirectLineCreate.json' | Out-String | ConvertFrom-Json;
        $key = $json.properties.properties.sites.key;
        echo "##vso[task.setvariable variable=DIRECTLINE;]$key";
        echo "##vso[task.setvariable variable=BOTID;]$(AzureBotName)";
        Write-Host "setx DIRECTLINE $key";
        Write-Host "setx BOTID $(AzureBotName)";
  - task: PowerShell@2
    displayName: Move .deployment, deploy.sh scripts into position
    inputs:
      targetType: inline
      script: >-
        Set-PSDebug -Trace 1;


        # Copy Azure deploy scripts for Linux

        Move-Item -Path $(SampleRootPath)\DeploymentScripts\Linux\* -Destination $(SampleRootPath)\;


        Set-PSDebug -Trace 0;
  - task: CmdLine@2
    displayName: Git bot deployment
    inputs:
      script: >
        git config --global user.name "BotBuilderSamplesPipeline"

        git config --global user.email BotBuilderSamples@Pipeline.com

        git init

        git add .

        git commit -m "cibuildtest"

        git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(BotName).scm.azurewebsites.net:443/$(BotName).git

        git push azure master
      workingDirectory: $(System.DefaultWorkingDirectory)/samples/csharp_dotnetcore/13.core-bot
  - task: NuGetCommand@2
    displayName: NuGet restore Samples.$(SampleBotName).FunctionalTests.csproj
    inputs:
      solution: samples/csharp_dotnetcore/tests/Samples.$(SampleBotName).FunctionalTests/Samples.$(SampleBotName).FunctionalTests.csproj
      selectOrConfig: config
      nugetConfigPath: $(SampleRootPath)\nuget.config
    condition: always()
  - task: DotNetCoreCLI@2
    displayName: dotnet build Samples.$(SampleBotName).FunctionalTests.csproj
    inputs:
      projects: $(System.DefaultWorkingDirectory)/samples/csharp_dotnetcore/tests/Samples.$(SampleBotName).FunctionalTests/Samples.$(SampleBotName).FunctionalTests.csproj
    condition: always()
  - task: InlinePowershell@1
    displayName: Sleep for 800 seconds
    inputs:
      Script: Start-Sleep -Seconds 800
    enabled: true
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      projects: $(System.DefaultWorkingDirectory)/samples/csharp_dotnetcore/tests/Samples.$(SampleBotName).FunctionalTests/**Tests.csproj
      arguments: --verbosity Normal
    condition: always()
  - task: CmdLine@2
    displayName: Dir workspace
    condition: always()
    continueOnError: True
    inputs:
      script: >
        dir .. /s
  - task: AzureCLI@2
    displayName: Delete bot, app service, app service plan, group
    condition: and(succeededOrFailed(), ne(variables['DeleteResourceGroup'], 'false'))
    continueOnError: True
    inputs:
      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: >-
        Set-PSDebug -Trace 1;

        Write-Host "1) Delete Bot:"
        az bot delete --name $(AzureBotName) --resource-group $(BotGroup)

        Write-Host "2) Delete App Service:"
        az webapp delete --name $(AzureBotName) --resource-group $(BotGroup)

        Write-Host "3) Delete App Service plan:"
        az appservice plan delete --name $(AzureBotName) --resource-group $(BotGroup) --yes

        Write-Host "4) Delete Resource Group:"
        az group delete --name $(BotGroup) --yes

        Set-PSDebug -Trace 0;
...
