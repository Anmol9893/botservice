// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.Integration.AspNet.Core;
using Microsoft.Bot.Builder.Skills;
using Microsoft.Bot.Connector.Authentication;
using Microsoft.Bot.Schema;
using Microsoft.Extensions.Configuration;

namespace Microsoft.BotBuilderSamples.SimpleRootBot.Bots
{
    public class RootBot : ActivityHandler
    {
        private const string _skillId = "EchoSkillBot";
        private readonly IStatePropertyAccessor<string> _activeSkillConversationIdProperty;
        private readonly string _botId;
        private readonly SkillConversationIdFactoryBase _conversationIdFactory;
        private readonly ConversationState _conversationState;
        private readonly BotFrameworkHttpClient _skillClient;
        private readonly SkillsConfiguration _skillsConfig;

        public RootBot(ConversationState conversationState, SkillsConfiguration skillsConfig, SkillConversationIdFactoryBase conversationIdFactory, BotFrameworkHttpClient skillClient, IConfiguration configuration)
        {
            _conversationIdFactory = conversationIdFactory;
            _botId = configuration.GetSection(MicrosoftAppCredentials.MicrosoftAppIdKey)?.Value;
            _skillClient = skillClient;
            _skillsConfig = skillsConfig;
            _conversationState = conversationState;
            _activeSkillConversationIdProperty = conversationState.CreateProperty<string>("activeSkillProperty");
        }

        protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
        {
            // Get the active skill conversation ID.
            var skillConversationId = await _activeSkillConversationIdProperty.GetAsync(turnContext, () => null, cancellationToken);

            if (skillConversationId != null)
            {
                // There is a skill active, just forward the activity to it.
                await SendToSkill(turnContext, skillConversationId, cancellationToken);
                return;
            }

            if (turnContext.Activity.Text.Contains("skill"))
            {
                await turnContext.SendActivityAsync(MessageFactory.Text("Got it, connecting you to the skill..."), cancellationToken);

                // Get and Save a conversationReference for skill
                skillConversationId = await _conversationIdFactory.CreateSkillConversationIdAsync(turnContext.Activity.GetConversationReference(), cancellationToken);
                await _activeSkillConversationIdProperty.SetAsync(turnContext, skillConversationId, cancellationToken);

                await SendToSkill(turnContext, skillConversationId, cancellationToken);
                return;
            }

            // just respond
            await turnContext.SendActivityAsync(MessageFactory.Text("Me no nothin'. Say \"skill\" and I'll patch you through"), cancellationToken);

            // Save conversation state
            await _conversationState.SaveChangesAsync(turnContext, force: true, cancellationToken: cancellationToken);
        }

        protected override async Task OnEndOfConversationActivityAsync(ITurnContext<IEndOfConversationActivity> turnContext, CancellationToken cancellationToken)
        {
            // forget skill invocation
            await _activeSkillConversationIdProperty.DeleteAsync(turnContext, cancellationToken);

            // We are back at the root
            await turnContext.SendActivityAsync(MessageFactory.Text("Back in the root bot. Say \"skill\" and I'll patch you through"), cancellationToken);

            // Save conversation state
            await _conversationState.SaveChangesAsync(turnContext, cancellationToken: cancellationToken);
        }

        protected override async Task OnMembersAddedAsync(IList<ChannelAccount> membersAdded, ITurnContext<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken)
        {
            foreach (var member in membersAdded)
            {
                if (member.Id != turnContext.Activity.Recipient.Id)
                {
                    await turnContext.SendActivityAsync(MessageFactory.Text("Hello and welcome!"), cancellationToken);
                }
            }
        }

        private async Task SendToSkill(ITurnContext<IMessageActivity> turnContext, string skillConversationId, CancellationToken cancellationToken)
        {
            // NOTE: Always SaveChanges() before calling a skill so that any activity generated by the skill
            // will have access to current accurate state.
            await _conversationState.SaveChangesAsync(turnContext, force: true, cancellationToken: cancellationToken);

            // route the activity to the skill
            await _skillClient.PostActivityAsync(_botId, _skillsConfig.Skills[_skillId].AppId, _skillsConfig.Skills[_skillId].SkillEndpoint, _skillsConfig.SkillHostEndpoint, skillConversationId, (Activity)turnContext.Activity, cancellationToken);
        }
    }
}
